{"version":3,"sources":["components/views/LandingPage/LandingPage.js","components/App.js","serviceWorker.js","index.js"],"names":["axios","require","Option","Select","uuidv4","replace","c","r","Math","random","toString","LandingPage","useState","isModalVisible","setIsModalVisible","coinData","setcoinData","selectedKey","setSelectedKey","isModalDetailVisible","setIsModalDetailVisible","selectedDetailKey","setSelectedDetailKey","coinNameData","setCoinNameData","selectedExchange","setSelectedExchange","useEffect","get","then","response","JSON","parse","data","content","catch","err","console","log","showModal","handleOk","handleCancel","handleOptionChange","value","className","listData","keyDate","indx","url","explain","fullName","push","date","title","visible","onOk","onCancel","footer","type","onClick","style","overflow","maxHeight","map","item","marginBottom","href","target","key","coinSymbol","coinKoreanName","length","modal","fontSize","dateCellRender","tmpKey","year","String","Number","month","onSelect","onClickCalendar","headerRender","onChange","monthOptions","onTypeChange","current","clone","localeData","months","i","monthsShort","index","padding","gutter","size","dropdownMatchSelectWidth","selectedMonth","newValue","parseInt","defaultValue","Footer","Layout","Header","Sider","Content","App","fallback","exact","path","component","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a7e0ff6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Calendar, Select, Button, Modal, Typography, Row, Col } from 'antd';\r\nimport './LandingPage.css'\r\n\r\nconst axios = require('axios');\r\nconst { Option } = Select;\r\n\r\nfunction uuidv4() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nfunction LandingPage() {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [coinData, setcoinData] = useState({});\r\n    const [selectedKey, setSelectedKey] = useState(\"\");\r\n    const [isModalDetailVisible, setIsModalDetailVisible] = useState(false);\r\n    const [selectedDetailKey, setSelectedDetailKey] = useState(\"\");\r\n    const [coinNameData, setCoinNameData] = useState({});\r\n    const [selectedExchange, setSelectedExchange] = useState(\"upbit\");\r\n\r\n    useEffect(() => {\r\n      axios.get('/api/getCoinData')\r\n        .then((response) => {\r\n          setcoinData(JSON.parse(response.data[0].content));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n      axios.get('/api/getCoinName')\r\n        .then((response) => {\r\n          setCoinNameData(JSON.parse(response.data[0].content))\r\n          console.log(JSON.parse(response.data[0].content))\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }, [])\r\n\r\n    function dateCellRender(value) {\r\n      let tmpKey = value.year() + '/' + String(Number(value.month())+1) + '/' + value.date();\r\n      // console.log(coinData[tmpKey]);\r\n      //console.log(upbitCoin);\r\n      let listData = [];\r\n      for (var key in coinData[tmpKey]) {\r\n        if (key in coinNameData[selectedExchange]) {\r\n          listData.push({coinSymbol: key, coinKoreanName: coinNameData[selectedExchange][key]});\r\n        }\r\n      }\r\n\r\n      return (\r\n        <ul className=\"events\">\r\n          {listData.map(item => (\r\n            <li key={uuidv4()}>\r\n              <span style={{fontSize: '0.6rem'}}>{item.coinSymbol}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n\r\n    const checkNameFromExchange = (exchange) => {\r\n\r\n    }\r\n\r\n    const modal = () => {\r\n      // console.log(coinData);\r\n\r\n      // 모달이 이미 띄워져있는 경우\r\n      if (isModalDetailVisible) {\r\n        let listData = [];\r\n          for (var keyDate in coinData) {\r\n            if (selectedDetailKey in coinData[keyDate]) {\r\n              for (var indx in coinData[keyDate][selectedDetailKey]) {\r\n                let url = coinData[keyDate][selectedDetailKey][indx][0];\r\n                let explain = coinData[keyDate][selectedDetailKey][indx][1]; \r\n                let fullName = coinData[keyDate][selectedDetailKey][indx][2]; \r\n                listData.push({date: keyDate, url: url, explain: explain, fullName: fullName});\r\n              }\r\n            } \r\n          }\r\n\r\n        return (\r\n          <Modal \r\n              title={ coinNameData[selectedExchange][selectedDetailKey] + \" \" + listData[0]['fullName'] + ' (' + selectedDetailKey + ')' }\r\n              visible={isModalVisible} \r\n              onOk={handleOk}\r\n              onCancel={handleCancel}\r\n              footer={[\r\n              <Button key=\"submit\" type=\"primary\" onClick={() => setIsModalDetailVisible(false)}>\r\n                BACK\r\n              </Button>,\r\n              ]}>\r\n            <ul className=\"modal\" style={{overflow: 'auto', maxHeight: '10rem'}}>\r\n              {listData.map(item => (\r\n                <li key={item.url} style={{marginBottom: '0.2rem'}}>\r\n                  <a className=\"modal-content\" href={item.url} target=\"_blank\">{item.date + \" \" + item.explain}</a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </Modal>\r\n        )\r\n      } \r\n      // 모달이 처음 띄워지는 경우\r\n      else {\r\n          let listData = [];\r\n          for (var key in coinData[selectedKey]) \r\n            if (key in coinNameData[selectedExchange]) \r\n              listData.push({coinSymbol: key, coinKoreanName: coinNameData[selectedExchange][key]});\r\n          \r\n          if (listData.length != 0)\r\n            return (\r\n              <Modal \r\n                  title={selectedKey}\r\n                  visible={isModalVisible} \r\n                  onOk={handleOk}\r\n                  onCancel={handleCancel}\r\n                  footer={[\r\n                  <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n                    OK\r\n                  </Button>,\r\n                  ]}>\r\n                <ul className=\"modal\" style={{overflow: 'auto', maxHeight: '10rem'}}>\r\n                  {listData.map(item => (\r\n                    <li key={uuidv4()} style={{marginBottom: '0.2rem'}}>\r\n                      <a className=\"modal-content\" onClick={() => {setSelectedDetailKey(item.coinSymbol); setIsModalDetailVisible(true);}}>{item.coinKoreanName +  ' (' + item.coinSymbol + ')'}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </Modal>\r\n            )\r\n      }\r\n    }\r\n\r\n    const onClickCalendar = (value) => {\r\n      setSelectedKey(value.year() + '/' + String(Number(value.month())+1) + '/' + value.date());\r\n      showModal();\r\n    }\r\n\r\n    const showModal = () => {\r\n      setIsModalVisible(true);\r\n    };\r\n    \r\n    const handleOk = () => {\r\n      setIsModalVisible(false);\r\n      setIsModalDetailVisible(false);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n      setIsModalDetailVisible(false);\r\n    };\r\n    \r\n    const handleOptionChange = (value) => {\r\n      setSelectedExchange(value)\r\n      console.log(value)\r\n    }\r\n\r\n    return (\r\n      <div className='container'>\r\n        {modal()}\r\n        <span style={{ fontSize: '1.2rem' }}>COHO</span>\r\n          <Calendar \r\n            className=\"calendar\" \r\n            dateCellRender={(value) => dateCellRender(value)} \r\n            onSelect={(value) => onClickCalendar(value)} \r\n            headerRender={({ value, type, onChange, onTypeChange }) => {\r\n              const start = 0;\r\n              const end = 12;\r\n              const monthOptions = [];\r\n      \r\n              const current = value.clone();\r\n              const localeData = value.localeData();\r\n              const months = [];\r\n              for (let i = 0; i < 12; i++) {\r\n                current.month(i);\r\n                months.push(localeData.monthsShort(current));\r\n              }\r\n      \r\n              for (let index = start; index < end; index++) {\r\n                monthOptions.push(\r\n                  <Select.Option className=\"month-item\" key={`${index}`}>\r\n                    {months[index]}\r\n                  </Select.Option>,\r\n                );\r\n              }\r\n              const month = value.month();\r\n\r\n              return (\r\n                <div style={{ padding: 8 }}>\r\n                  <Row gutter={8}>\r\n                    <Col>\r\n                      <Select\r\n                        size=\"small\"\r\n                        dropdownMatchSelectWidth={false}\r\n                        value={String(month)}\r\n                        onChange={selectedMonth => {\r\n                          const newValue = value.clone();\r\n                          newValue.month(parseInt(selectedMonth, 10));\r\n                          onChange(newValue);\r\n                        }}\r\n                      >\r\n                        {monthOptions}\r\n                      </Select>\r\n                    </Col>\r\n                    <Col>\r\n                      <Select\r\n                        size=\"small\"\r\n                        dropdownMatchSelectWidth={false}\r\n                        defaultValue=\"upbit\"\r\n                        onChange={handleOptionChange}>\r\n                        <Option value=\"upbit\">Upbit</Option>\r\n                        <Option value=\"bitsum\">Bitsum</Option>\r\n                        <Option value=\"coinone\">Coinone</Option>\r\n                        <Option value=\"coinbit\">Coinbit</Option>\r\n                      </Select>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              );\r\n            }}\r\n            />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n","import React, { Suspense } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Layout } from 'antd';\r\nimport LandingPage from \"./views/LandingPage/LandingPage\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={(<div>Loading...</div>)}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LandingPage} />\r\n        </Switch>\r\n        <Footer style={{backgroundColor: 'white'}}></Footer>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.unregister();"],"sourceRoot":""}